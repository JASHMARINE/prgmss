24) To implement circular linked list
#include<iostream.h>
#include<conio.h>
struct node
{
int val;
node *next;
};
node *head=NULL;
node *rear=NULL;
node *newNode;
int length = 0;
void insertBeg(int item)
{
newNode = new node;
newNode->val = item;
newNode->next = NULL;
if( head == NULL)
{
head = newNode;
rear = newNode;
}
else
{
newNode->next = head;
head = newNode;
}
length++;
}
void insertEnd(int item)
{
newNode = new node;
newNode ->val = item;
newNode->next = NULL;
if( head == NULL)
{
head = newNode;
rear = newNode;
}
else
{
rear->next = newNode;
newNode->next = head;
rear = newNode;
}
length++;
}
void insertInBtw(int item,int pos)
{
if(pos==1)
insertBeg(item);
else if( pos == length)
insertEnd(item);
else if(pos>length)
return;
else
{
node *p1 = head;
node *p2 = head->next;
newNode = new node;
newNode->val = item;
newNode->next = NULL;
for(int i=1;i<pos-1;i++)
{
p1 = p2;
p2 = p2->next;
}
p1->next = newNode;
newNode->next = p2;
length++;
}
}
void deleteStart()
{
if(head == NULL)
{
cout<<"\nList empty";
return;
}
else{
node *temp = head;
head = head->next;
delete temp;
length--;
}
}
void deleteEnd()
{
if(head == NULL)
{
cout<<"\nList empty";
return;
}
else{
node *temp = head;
while(temp->next!=rear)
{
temp = temp->next;
}
temp -> next = head;
node *t2 = rear;
rear = temp;
delete t2;
length--;
}
}
void deleteInBtw(int pos)
{
if(pos==1)
deleteStart();
else if( pos == length)
deleteEnd();
else
{
node *p1=head;
node *p2=head->next;
node *temp;
for(int i=1;i<pos-1;i++)
{
p1 = p2;
p2 = p2->next;
}
temp = p2->next;
p1->next = temp;
delete p2;
length--;
}
}
void printlist()
{
node *temp = head;
while(temp != rear )
{
cout<<temp->val<<" ";
temp = temp->next;
}
cout<<rear->val;
cout<<"\nTotal length="<<length;
}
void main()
{
clrscr();
insertBeg(1);
insertBeg(2);
insertBeg(3);
insertEnd(4);
insertEnd(5);
insertBeg(0);
insertEnd(11);
insertBeg(17);
insertInBtw(22,2);
cout<<"\nInsertion: ";
printlist(); //17 22 0 3 2 1 4 5 11
cout<<"\n\nDeletion of 3rd element: ";
deleteInBtw(3);
cout<<"\n";
printlist();
cout<<"\n\nAfter random Deletions: ";
deleteStart();
deleteEnd();
deleteStart();
deleteEnd();
printlist();
getch();